// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productFieldNames          = builder.RawFieldNames(&Product{})
	productRows                = strings.Join(productFieldNames, ",")
	productRowsExpectAutoSet   = strings.Join(stringx.Remove(productFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productRowsWithPlaceHolder = strings.Join(stringx.Remove(productFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	productModel interface {
		Insert(ctx context.Context, data *Product) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Product, error)
		Update(ctx context.Context, data *Product) error
		Delete(ctx context.Context, id uint64) error
		ListProducts(ctx context.Context, page, pagesize int32) ([]Product, error)
	}

	defaultProductModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Product struct {
		Id          uint64         `db:"id"`
		Name        string         `db:"name"`
		Description sql.NullString `db:"description"`
		Picture     sql.NullString `db:"picture"`
		Price       float64        `db:"price"`
		Categories  sql.NullString `db:"categories"`
	}
)

func newProductModel(conn sqlx.SqlConn) *defaultProductModel {
	return &defaultProductModel{
		conn:  conn,
		table: "`Product`",
	}
}

func (m *defaultProductModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultProductModel) FindOne(ctx context.Context, id uint64) (*Product, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productRows, m.table)
	var resp Product
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) Insert(ctx context.Context, data *Product) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, productRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.Description, data.Picture, data.Price, data.Categories)
	return ret, err
}

func (m *defaultProductModel) Update(ctx context.Context, data *Product) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Description, data.Picture, data.Price, data.Categories, data.Id)
	return err
}

func(m *defaultProductModel) ListProducts(ctx context.Context, page, pagesize int32) ([]Product, error) {
	query := fmt.Sprintf("select %s from %s limit?,?", productRows, m.table)
	var resp []Product
	err := m.conn.QueryRowsCtx(ctx, &resp, query, page, pagesize)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) tableName() string {
	return m.table
}
