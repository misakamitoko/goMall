// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"
	"cart-service/model"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	shoppingCartsFieldNames          = builder.RawFieldNames(&ShoppingCarts{})
	shoppingCartsRows                = strings.Join(shoppingCartsFieldNames, ",")
	shoppingCartsRowsExpectAutoSet   = strings.Join(stringx.Remove(shoppingCartsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	shoppingCartsRowsWithPlaceHolder = strings.Join(stringx.Remove(shoppingCartsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	shoppingCartsModel interface {
		Insert(ctx context.Context, data *ShoppingCarts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ShoppingCarts, error)
		Update(ctx context.Context, data *ShoppingCarts) error
		Delete(ctx context.Context, id int64) error
		FindOneByUserId(ctx context.Context, userId uint32) (*ShoppingCarts, error)
		TransInsert(session sqlx.Session, data *ShoppingCarts) (sql.Result, error)
		Trans(fn func(session sqlx.Session) error) error
	}

	defaultShoppingCartsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	ShoppingCarts struct {
		Id        int64     `db:"id"`
		UserId    uint64    `db:"user_id"`
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

// 事务开启
func(m *defaultShoppingCartsModel) Trans(fn func(session sqlx.Session)error) error{
	err := m.conn.Transact(func(session sqlx.Session) error{
		err := fn(session)
		if err != nil{
			return err
		}
		return nil
	})
	return err
}


func(m *defaultShoppingCartsModel) TransInsert(session sqlx.Session, data *ShoppingCarts) (sql.Result, error){
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, shoppingCartsRowsExpectAutoSet)
	res, err := session.ExecCtx(context.Background(), query, data.UserId)
	return res, err
}

func newShoppingCartsModel(conn sqlx.SqlConn) *defaultShoppingCartsModel {
	return &defaultShoppingCartsModel{
		conn:  conn,
		table: "`shopping_carts`",
	}
}

func (m *defaultShoppingCartsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultShoppingCartsModel) FindOne(ctx context.Context, id int64) (*ShoppingCarts, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", shoppingCartsRows, m.table)
	var resp ShoppingCarts
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShoppingCartsModel) FindOneByUserId(ctx context.Context, userId uint32) (*ShoppingCarts, error){
	query := fmt.Sprintf("select %s from %s where `user_id` =? limit 1", shoppingCartsRows, m.table)
	var resp ShoppingCarts
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, model.ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultShoppingCartsModel) Insert(ctx context.Context, data *ShoppingCarts) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, shoppingCartsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId)
	return ret, err
}

func (m *defaultShoppingCartsModel) Update(ctx context.Context, data *ShoppingCarts) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, shoppingCartsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.Id)
	return err
}

func (m *defaultShoppingCartsModel) tableName() string {
	return m.table
}
